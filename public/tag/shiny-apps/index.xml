<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiny Apps | Victor Mandela</title>
    <link>https://victormandela.netlify.app/tag/shiny-apps/</link>
      <atom:link href="https://victormandela.netlify.app/tag/shiny-apps/index.xml" rel="self" type="application/rss+xml" />
    <description>Shiny Apps</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>&amp;copy2022</copyright><lastBuildDate>Tue, 16 Feb 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://victormandela.netlify.app/images/icon_hu22efcb094e0f25517d9b2ea60a3d74df_42984_512x512_fill_lanczos_center_2.png</url>
      <title>Shiny Apps</title>
      <link>https://victormandela.netlify.app/tag/shiny-apps/</link>
    </image>
    
    <item>
      <title>Buiding shinyApps3: Outputs</title>
      <link>https://victormandela.netlify.app/post/buiding-shinyapps3-outputs/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://victormandela.netlify.app/post/buiding-shinyapps3-outputs/</guid>
      <description>&lt;h2 id=&#34;outputs-in-shinyapps&#34;&gt;OutPuts in ShinyApps&lt;/h2&gt;
&lt;p&gt;Outputs are build in shinyApps based on inputs. We use render functiond to create a variety of outputs ranging from plots &lt;strong&gt;renderPlot&lt;/strong&gt;, tables &lt;strong&gt;renderTable&lt;/strong&gt; and images &lt;strong&gt;renderImage&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;add-a-table-output&#34;&gt;Add a table output&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;In order to add any output to a Shiny app, you need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create the output (plot, table, text, etc.).&lt;/li&gt;
&lt;li&gt;Render the output object using the appropriate *render___* function.&lt;/li&gt;
&lt;li&gt;Assign the rendered object to &lt;em&gt;output$x&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Add the output to the UI using the appropriate &lt;em&gt;___Output&lt;/em&gt; function.&lt;/li&gt;
&lt;li&gt;In this example, you will add a table output to the baby names explorer app you created earlier. Don&amp;rsquo;t forget that code inside a render___ function needs to be wrapped inside curly braces (e.g. renderPlot({&amp;hellip;})).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ui &amp;lt;- fluidPage(
  titlePanel(&amp;quot;What&#39;s in a Name?&amp;quot;),
  # Add select input named &amp;quot;sex&amp;quot; to choose between &amp;quot;M&amp;quot; and &amp;quot;F&amp;quot;
  selectInput(&#39;sex&#39;, &#39;Select Sex&#39;, choices = c(&amp;quot;F&amp;quot;, &amp;quot;M&amp;quot;)),
  # Add slider input named &amp;quot;year&amp;quot; to select year between 1900 and 2010
  sliderInput(&#39;year&#39;, &#39;Select Year&#39;, min = 1900, max = 2010, value = 1900),
  # CODE BELOW: Add table output named &amp;quot;table_top_10_names&amp;quot;
  tableOutput (&amp;quot;table_top_10_names&amp;quot;)
)
server &amp;lt;- function(input, output, session){
  # Function to create a data frame of top 10 names by sex and year 
  top_10_names &amp;lt;- function(){
    top_10_names &amp;lt;- babynames %&amp;gt;% 
      filter(sex == input$sex) %&amp;gt;% 
      filter(year == input$year) %&amp;gt;% 
      top_n(10, prop)
  }
  # CODE BELOW: Render a table output named &amp;quot;table_top_10_names&amp;quot;
  output$table_top_10_names &amp;lt;- renderTable ({
    top_10_names()
  })
  
}
shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;add-an-interactive-table-output&#34;&gt;Add an interactive table output&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;There are multiple &lt;em&gt;htmlwidgets packages&lt;/em&gt; like DT, leaflet, plotly, etc. that provide highly interactive outputs and can be easily integrated into Shiny apps using almost the same pattern. For example, you can turn a static table in a Shiny app into an interactive table using the &lt;em&gt;DT package&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an interactive table using DT::datatable().&lt;/li&gt;
&lt;li&gt;Render it using DT::renderDT().&lt;/li&gt;
&lt;li&gt;Display it using DT::DTOutput().&lt;/li&gt;
&lt;li&gt;In this example, you will update the app created previously, replacing the static table with an interactive table.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ui &amp;lt;- fluidPage(
  titlePanel(&amp;quot;What&#39;s in a Name?&amp;quot;),
  # Add select input named &amp;quot;sex&amp;quot; to choose between &amp;quot;M&amp;quot; and &amp;quot;F&amp;quot;
  selectInput(&#39;sex&#39;, &#39;Select Sex&#39;, choices = c(&amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;)),
  # Add slider input named &amp;quot;year&amp;quot; to select year between 1900 and 2010
  sliderInput(&#39;year&#39;, &#39;Select Year&#39;, min = 1900, max = 2010, value = 1900),
  # MODIFY CODE BELOW: Add a DT output named &amp;quot;table_top_10_names&amp;quot;
  DT::DTOutput(&#39;table_top_10_names&#39;)
)
server &amp;lt;- function(input, output, session){
  top_10_names &amp;lt;- function(){
    babynames %&amp;gt;% 
      filter(sex == input$sex) %&amp;gt;% 
      filter(year == input$year) %&amp;gt;% 
      top_n(10, prop)
  }
  # MODIFY CODE BELOW: Render a DT output named &amp;quot;table_top_10_names&amp;quot;
  output$table_top_10_names &amp;lt;- DT::renderDT({
    top_10_names() %&amp;gt;%
    DT::datatable()
  })
}
shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;add-interactive-plot-output&#34;&gt;Add interactive plot output&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Similar to creating interactive tables, you can easily turn a static plot created using ggplot2 into an interactive plot using the &lt;em&gt;plotly package&lt;/em&gt;. To render an interactive plot, use plotly::renderPlotly(), and display it using plotly::plotlyOutput().&lt;/p&gt;
&lt;p&gt;Remember that just like with other render functions, the code inside plotly::renderPlotly() should be wrapped in curly braces {}!&lt;/p&gt;
&lt;p&gt;Check out the next illustrations&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ui &amp;lt;- fluidPage(
  selectInput(&#39;name&#39;, &#39;Select Name&#39;, top_trendy_names$name),
  # CODE BELOW: Add a plotly output named &#39;plot_trendy_names&#39;
  plotly::plotlyOutput(&amp;quot;plot_trendy_names&amp;quot;)
)
server &amp;lt;- function(input, output, session){
  # Function to plot trends in a name
  plot_trends &amp;lt;- function(){
     babynames %&amp;gt;% 
      filter(name == input$name) %&amp;gt;% 
      ggplot(aes(x = year, y = n)) +
      geom_col()
  }
  # CODE BELOW: Render a plotly output named &#39;plot_trendy_names&#39;
output$plot_trendy_names &amp;lt;- plotly::renderPlotly({
  plot_trends()
})
  
  
}
shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;benefits-of-an-interactive-plot&#34;&gt;Benefits of an interactive plot&lt;/h3&gt;
&lt;p&gt;Try interacting with the plot. You can zoom in on certain areas, zoom back out, and hover over the bars to see the values. This makes plots in your app far more interesting, and allows users to gain insights without having to see any code or data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>building shinApp4: Layouts and themes</title>
      <link>https://victormandela.netlify.app/post/building-shinapp4-layouts-and-themes/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://victormandela.netlify.app/post/building-shinapp4-layouts-and-themes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Building shinyApp2: Inputs options </title>
      <link>https://victormandela.netlify.app/post/building-shinyapp2-inputs-outputs-and-layouts/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://victormandela.netlify.app/post/building-shinyapp2-inputs-outputs-and-layouts/</guid>
      <description>&lt;h2 id=&#34;inputs&#34;&gt;INPUTS&lt;/h2&gt;
&lt;p&gt;Shiny provides a wide variety of inputs that allows users to provide text &lt;strong&gt;(textInput, selectInput)&lt;/strong&gt;, numbers &lt;strong&gt;(numericInput, sliderInput)&lt;/strong&gt;, booleans &lt;strong&gt;(checkBoxInput, radioInput)&lt;/strong&gt;, and dates &lt;strong&gt;(dateInput, dateRangeInput)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example:-&lt;/p&gt;
&lt;p&gt;To select a range a name from a predifined range of choice we use - the &lt;strong&gt;selectInput&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;selectInput(&amp;quot;InputID&amp;quot;,
            &amp;quot;Label&amp;quot;,
            choices = c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To choose a range of values to filter weight we can use the &lt;strong&gt;sliderInput&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sliderInput(&amp;quot;InputID&amp;quot;,
            &amp;quot;Label&amp;quot;,
            value = 1925,
            max = 2021,
            min =1900,)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To select three phones to compare from a set of 10 options we can use the &lt;strong&gt;checkBoxInput&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NoTE&lt;/strong&gt; - It&amp;rsquo;s helpful to visualize what you want your input to look like first, then choose the corresponding Shiny input. It is better to draw a &lt;strong&gt;Sketch&lt;/strong&gt; first.&lt;/p&gt;
&lt;h3 id=&#34;add-a-select-input&#34;&gt;Add a select input&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Adding an input to a shiny app is a two step process, where you first add an &lt;strong&gt;___Input(“x”)&lt;/strong&gt; function to the UI and then access its value in the server using &lt;strong&gt;input$x&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if you want users to choose an animal from a list, you can use a selectInput, and refer to the chosen value as input$animal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;selectInput(
  &#39;animal&#39;, 
  &#39;Select Animal&#39;, 
  selected = &#39;Cat&#39;, 
  choices = c(&#39;Dog&#39;, &#39;Cat&#39;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, you will build a Shiny app that lets users visualize the top 10 most popular names by sex by adding an input to let them choose the sex.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ui &amp;lt;- fluidPage(
  titlePanel(&amp;quot;What&#39;s in a Name?&amp;quot;),
  # CODE BELOW: Add select input named &amp;quot;sex&amp;quot; to choose between &amp;quot;M&amp;quot; and &amp;quot;F&amp;quot;
selectInput(&amp;quot;sex&amp;quot;, &amp;quot;What is your gender?&amp;quot;, &amp;quot;F&amp;quot;, choices = c(&amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;)),
  # Add plot output to display top 10 most popular names
  plotOutput(&#39;plot_top_10_names&#39;)
)

server &amp;lt;- function(input, output, session){
  # Render plot of top 10 most popular names
  output$plot_top_10_names &amp;lt;- renderPlot({
    # Get top 10 names by sex and year
    top_10_names &amp;lt;- babynames %&amp;gt;% 
      # MODIFY CODE BELOW: Filter for the selected sex
      filter(sex == input$sex) %&amp;gt;% 
      filter(year == 1900) %&amp;gt;% 
      top_n(10, prop)
    # Plot top 10 names by sex and year
    ggplot(top_10_names, aes(x = name, y = prop)) +
      geom_col(fill = &amp;quot;#263e63&amp;quot;)
  })
}

shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;slider-input&#34;&gt;Slider Input&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;We can add a sliderInput for year to select the range of between 1900 to 2010, with a default of 1920 by adding the following code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ui &amp;lt;- fluidPage(
  titlePanel(&amp;quot;What&#39;s in a Name?&amp;quot;),
  # Add select input named &amp;quot;sex&amp;quot; to choose between &amp;quot;M&amp;quot; and &amp;quot;F&amp;quot;
  selectInput(&#39;sex&#39;, &#39;Select Sex&#39;, choices = c(&amp;quot;F&amp;quot;, &amp;quot;M&amp;quot;)),
  # CODE BELOW: Add slider input named &#39;year&#39; to select years  (1900 - 2010)
  sliderInput(&amp;quot;year&amp;quot;, &amp;quot;choose year&amp;quot;, value = 1900, min = 1900, max = 2010),

  # Add plot output to display top 10 most popular names
  plotOutput(&#39;plot_top_10_names&#39;)
)

server &amp;lt;- function(input, output, session){
  # Render plot of top 10 most popular names
  output$plot_top_10_names &amp;lt;- renderPlot({
    # Get top 10 names by sex and year
    top_10_names &amp;lt;- babynames %&amp;gt;% 
      filter(sex == input$sex) %&amp;gt;% 
    # MODIFY CODE BELOW: Filter for the selected year
      filter(year == input$year) %&amp;gt;% 
      top_n(10, prop)
    # Plot top 10 names by sex and year
      ggplot(top_10_names, aes(x = name, y = prop)) +
        geom_col(fill = &amp;quot;#263e63&amp;quot;)
  })
}

shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to build a ShinyApp</title>
      <link>https://victormandela.netlify.app/post/how-to-build-a-shinyapp/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://victormandela.netlify.app/post/how-to-build-a-shinyapp/</guid>
      <description>&lt;h2 id=&#34;building-a-hello-world-shinyapp&#34;&gt;Building a &amp;ldquo;Hello world shinyApp&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;We begin to demonstrate the building blocks of a shinyApp.&lt;/p&gt;
&lt;p&gt;An App needs a &lt;em&gt;User interface (ui)&lt;/em&gt; and a server. The majic about the &lt;em&gt;shiny package&lt;/em&gt; is that it can create both of this within R, plus run your app using an additionational shiny function.&lt;/p&gt;
&lt;p&gt;First,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;load the library using the shiny.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create ui using the html function&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ui &amp;lt;- fluidPage()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Define a custom function to create the server&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;server &amp;lt;- function(input,
                   output,
                   session){
  
                   }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;finally run your app.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example1-of-shiny-app&#34;&gt;Example1 of shiny app&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)
library(widgetframe)

ui &amp;lt;- fluidPage(
  &amp;quot;Hello, world!!!!!!&amp;quot;
)
  
server &amp;lt;- function(input,
                   output,
                   session){
  
                   }
  
  
shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;example2-add-a-question&#34;&gt;Example2: Add a question&lt;/h3&gt;
&lt;p&gt;We want to go an extra mile an add a text that asks a question. This is possible but adding &lt;em&gt;textinput&lt;/em&gt; functuion that allows us to enter text. It has three arguments, a unique ID that will be used to refer to this input, a label that is displayed to the user and an optional default value.&lt;/p&gt;
&lt;p&gt;Our full out put that is diplayed is contained in the server using the render text function. Inside of that you can use &lt;em&gt;paste&lt;/em&gt; to create a longer character string. And if add &lt;em&gt;input$name&lt;/em&gt; you can access the name added using text input. The text is assigned to an output object that will be used in the ui to display.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)
library(widgetframe)

ui &amp;lt;- fluidPage(
  textInput(&amp;quot;name&amp;quot;, &amp;quot;Enter your name:&amp;quot;),
  textOutput(&amp;quot;r&amp;quot;)
)
  
server &amp;lt;- function(input, output){
  output$r &amp;lt;- renderText({
    paste0(&amp;quot;Do you prefer rain or sunshine,&amp;quot;, input$name, &amp;quot;?&amp;quot;)
  })
  
                   }
  
  
shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You did it a text that uses a text input!!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
